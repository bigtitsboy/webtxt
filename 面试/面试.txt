vue router 创建一个router的实例并导出


原型链的继承：子类的原型对象指向父类的实例，当子类的实例找不到对应的属性或方法，会往原型链上方找
()=>this指向箭头函数的父亲的父亲

hasOwnProperty()

● js的各种位置，比如clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop的区别？
参考回答：
clientHeight：表示的是可视区域的高度，不包含border和滚动条
offsetHeight：表示可视区域的高度，包含了border和滚动条

scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分。

clientTop：表示边框border的厚度，在未指定的情况下一般为0

scrollTop：滚动后被隐藏的高度，获取对象相对于由offsetParent属性指定的父坐标(css定位的元素或body元素)距离顶端的高度。
不使用var而直接声明变量，则该变量为全局变量。

function globals() { function myObject () { name : 'Jory' }; return myObject;}修改为闭包形式 即可非全局变量

parseInt(string, radix) radix按10进制去处理字符串，碰到非数字字符，会将后面的全部无视
 parseInt() 只有一个参数的时候本身就能转化字符串，直到第一个非数，第二个参数是可以当作是第一个参数的进制，最终都会转成10进制。题目中有一个 0x12 这个方法是表示 16 进制的方法 最终化成 10 进制就是 18， 而我们在第二个参数写 10 之后，就代表把第一个参数看成一个10进制数，所以 0x12 就不会转成18，而是正常字符串，所以遇到第一个非负数就结束，就是输出0。而且第二个参数只要不写16，其他进制例如 2，8，10 都行，不要是16进制就行，因为0x12 刚好是代表16进制的数


 实现一个两列等高布局，讲讲思路
参考回答：
为了实现两列等高，可以给每列加上 padding-bottom:9999px;
margin-bottom:-9999px;同时父元素设置overflow:hidden;


基本数据类型：Undefined、Null、Boolean、Number、String，Symbol
引用数据类型 ：Object


为什么要用闭包 即有的函数只需要执行一次，其内部变量无需维护，可以用闭包。


let sy = Symbol("KK");
console.log(sy);   // Symbol(KK)
typeof(sy);        // "symbol"
// 相同参数 Symbol() 返回的值不相等
let sy1 = Symbol("kk"); 
sy === sy1;       // false

HTML DOM addEventListener() 方法
第三个参数 可选。布尔值，指定事件是否在捕获或冒泡阶段执行。
可能值:
true - 事件句柄在捕获阶段执行
false- false- 默认。事件句柄在冒泡阶段执行


这是dom0级别：
document.getElementById("btn").onclick = function(){};
这是dom2级：
document.getElementById("btn").addEventListener("click", function(){}, false);
dom0级后面绑定的事件会覆盖前面绑定的事件，点击的时候会执行新绑定的
dom2级不会覆盖前面绑定的事件，点击的时候所有绑定的事件会依次执行一遍

vue修饰符
stop：阻止事件的冒泡
prevent：阻止事件的默认行为
once：只触发一次
self：只触发自己的事件行为时，才会执行

1.解析HTML文件，创建DOM树 2.解析CSS,形成CSS对象模型 3.将CSS与DOM合并，构建渲染树（renderingtree） 4.布局和绘制<br

async : 并行加载js，下载完毕立即解释执行代码，不会按照页面上的script顺序执行。
defer : 并行下载js，在页面解析完毕之后，会按照页面上的script标签的顺序执行,同时会在document的DOMContentLoaded之前执行

说一下token 能放在cookie中吗？
能、不设置cookie有效期、重新登录重写cookie覆盖原来的cookie

信号量
多个函数同时改变一个变量的值，这个变量成为信号量，（全局变量） 。

null  typeof null 返回 'object' 。
这是一个对象，但是为空。因为是对象，所以 typeof null 返回 'object' 。
null 是 JavaScript 保留关键字。
null 参与数值运算时其值会自动转换为 0 ，因此，下列表达式计算后会得到正确的数值：
undefined是window对象的一个属性，但却不是anObj对象的一个属性。  typeof undefined 返回 'undefined' 。
注意：尽管undefined是有特殊含义的属性，但却不是JavaScript的保留关键字。
undefined参与任何数值计算时，其结果一定是NaN。

原型链的顶端：null
Object的原型：Function.prototype
Object原型的原型：Object.prototype
数组原型链上实现数组去重方法：
Array.prototype.unique = function() {
    let obj = {}, len = this.length, newArr = [];
    for (let i = 0; i < len; i++) {
        if (!obj[this[i]]) {
            obj[this[i]] = 1;
            newArr.push(this[i])
        }
    }
    return newArr;
}

什么是跨域
当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域

vue中 key 值的作用

当 Vue.js 用v-for正在更新已渲染过的元素列表时，它默认用“就地复用”策略。
如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。
key的作用主要是为了高效的更新虚拟DOM。

Vue中事件绑定的原理
答案
1.原生dom事件的绑定,采用的是addEventListener实现
2.组件绑定事件采用的是$on方法

vue-router 路由钩子函数是什么？执行顺序是什么？
路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。

我们都知道 Vue 是数据双向绑定的框架，双向绑定由三个重要部分构成
数据层（Model）：应用的数据及业务逻辑
视图层（View）：应用的展示效果，各类 UI 组件
业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来
而上面的这个分层的架构方案，可以用一个专业术语进行称呼：MVVM
这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理
理解 ViewModel
它的主要职责就是：
数据变化后更新视图
视图变化后更新数据

attribute和property的区别是什么？
attribute是dom元素在文档中作为html标签拥有的属性；
property就是dom元素在js中作为对象拥有的属性。